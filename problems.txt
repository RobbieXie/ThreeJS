1. 坐标系如何对应；显示多大范围的3D管道
2. 通过JSON获取绘图所需的三维点坐标。 JSON数据的具体格式定义
3. 如何同时显示2D和3D； 页面的划分， 技术上的尝试
4. THREEJS onclick事件的研究
5. 3D模型和额外信息的绑定研究

json格式输入数据

{
  当前坐标：{X:121.220184, y: 31.288279},
  管道：[
    {
      管道信息：{
      ID: 114
      名称：同济地下水管
      类型: 水管
      所属公司：水利局
      状态：0（损坏）/1（正常）/2（维修中）
      ...
      }
      points：[
        { x: 121.220184
          y: 31.288279
          z: 20(cm)
          radius: 5(cm)
          location: start/mid/end
        },
        { x: 121.220184
          y: 31.288279
          z: 20(cm)
          radius: 5(cm)
          location: start/mid/end
        },...
      ]
    },
    {
      管道信息：{
      ID：666
      名称：嘉定校区煤气管道
      类型：煤气管道
      所属公司：煤气公司
      状态：0（损坏）/1（正常）/2（维修中）
      ...
      }
      points：[
        { x: 121.220184
          y: 31.288279
          z: 20(cm)
          radius: 5(cm)
          location: start/mid/end
        },
        { x: 121.220184
          y: 31.288279
          z: 20(cm)
          radius: 5(cm)
          location: start/mid/end
        },...
      ]
    }
  ]
}

任务：
1.通过JSON来读取管道信息，并绘制管道
   1.1 读取JSON数据，（目前用假数据）
   1.2 比例的转换， 经纬度坐标 --> THREEJS坐标
   1.3 根据转换后的点信息，绘制管道
   1.4 选取一个合适的视野点
2.点击事件，弹框显示所点击管道的详细信息；
   2.1 点击的准确性。 （不准确可能是由于camera长宽和window的长宽不一致导致）
   2.2 点击后获取管道信息。（mesh.userData可以存储json信息。创建mesh时，根据管道json对应赋值，点击时即可获取）
   2.3 弹框显示。（不要求好看）
3.封装函数到自己的库中。
   把我们测试用到的通用方法，常用方法，封装到一个js中，方便调用。



11.30日更新任务：
1.显示框的大小动态调整、修改对应 width、height
2.根据坐标信息调整camera位置（视野起点）
3.绘制管道方法中加入颜色变量作为参数，并写几个全局颜色供使用（最好通过枚举写）
4.弹框界面优化调整
5.使用过程中提出一些新建议
6.将用到的方法整理规范，写到一个自己的js中，作为库进行调用
